var site_year = ee.FeatureCollection("users/yxia/Moisture/site_year"),
    RAP = ee.ImageCollection("projects/rangeland-analysis-platform/vegetation-cover-v2");


/* -------------Buffer function-------------*/ 

//Copying and pasting functions for maiking point buffer and carrying out zonal statistics analysis
function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
  };
}
function zonalStats(ic, fc, params) {
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
  };
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;
  var results = ic.map(function(img) {
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);
    var fcSub = fc.filterBounds(img.geometry());
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));
  return results;
}


/* -------------Define parameters-------------*/ 

var paramscov = {
  scale: 30,
  crs: 'EPSG:4326',
  reducer: ee.Reducer.mean(),
  bands: ['AFGC','BG','LTR','PFGC','SHR','TREE'],
};


/* -------------Get RAP for site-year combinations-------------*/

var num = site_year.size().getInfo()
var siteyearbuffer = site_year.map(bufferPoints(90, false));
var listofbuffers = siteyearbuffer.toList(siteyearbuffer.size());
var idlist = site_year.aggregate_array('Num')
var yearlist = site_year.aggregate_array('Water_year')
var listforpred = ee.List.sequence(0, num-1);
var Extresult = listforpred.map(function(i){
  var RAPsite = RAP.filter(ee.Filter.equals("year", yearlist.get(i))).select(0,1,2,3,4,5).first();
return RAPsite;
})

var Covcol = ee.ImageCollection(Extresult);
var listofimages = Covcol.toList(Covcol.size());
var loop = function(i){
 var Cov = ee.ImageCollection([listofimages.get(i)]);
 var buffer = ee.FeatureCollection([listofbuffers.get(i)]);
 return zonalStats(Cov, buffer, paramscov)
}
var result = ee.FeatureCollection(listforpred.map(loop)).flatten()

Export.table.toDrive({
  collection: result,
  selectors: ['Site','Num','Water_year','AFGC','BG','LTR','PFGC','SHR','TREE'],
  fileFormat: 'CSV',
  });