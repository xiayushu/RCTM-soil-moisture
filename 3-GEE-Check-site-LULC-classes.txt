//Import file with stations and the NLCD datasets for LULC
//The file should have site name/ID and network name (if stations were merged from multiple networks)
var site = ee.FeatureCollection("users/yxia/Moisture/Station"),
    NLCD = ee.ImageCollection("USGS/NLCD_RELEASES/2016_REL"),
    NLCD2019 = ee.Image("users/yxia/Datasets/nlcd_2019");

//Get land use layers for different years
var NLCD2019 = NLCD2019.rename("nlcd2019");
var NLCD2001 = NLCD.filterMetadata("system:index", "equals", "2001").first().select(0).rename("nlcd2001");
var NLCD2006 = NLCD.filterMetadata("system:index", "equals", "2006").first().select(0).rename("nlcd2006");
var NLCD2011 = NLCD.filterMetadata("system:index", "equals", "2011").first().select(0).rename("nlcd2011");
var NLCD2016 = NLCD.filterMetadata("system:index", "equals", "2016").first().select(0).rename("nlcd2016");
var covariates = ee.Image.cat(NLCD2001,NLCD2006,NLCD2011,NLCD2016,NLCD2019)
  .set('system:time_start', ee.Date('2019-01-01').millis());
//print(covariates);
var covCol = ee.ImageCollection([covariates]);
//print(covCol);

//Copy and paste GEE-based buffer function
function bufferPoints(radius, bounds) {
  return function(pt) {
    pt = ee.Feature(pt);
    return bounds ? pt.buffer(radius).bounds() : pt.buffer(radius);
  };
}
function zonalStats(ic, fc, params) {
  var _params = {
    reducer: ee.Reducer.mean(),
    scale: null,
    crs: null,
    bands: null,
    bandsRename: null,
    imgProps: null,
    imgPropsRename: null,
    datetimeName: 'datetime',
    datetimeFormat: 'YYYY-MM-dd HH:mm:ss'
  };
  if (params) {
    for (var param in params) {
      _params[param] = params[param] || _params[param];
    }
  }
  var imgRep = ic.first();
  var nonSystemImgProps = ee.Feature(null)
    .copyProperties(imgRep).propertyNames();
  if (!_params.bands) _params.bands = imgRep.bandNames();
  if (!_params.bandsRename) _params.bandsRename = _params.bands;
  if (!_params.imgProps) _params.imgProps = nonSystemImgProps;
  if (!_params.imgPropsRename) _params.imgPropsRename = _params.imgProps;
  var results = ic.map(function(img) {
    img = ee.Image(img.select(_params.bands, _params.bandsRename))
      .set(_params.datetimeName, img.date().format(_params.datetimeFormat))
      .set('timestamp', img.get('system:time_start'));
    var propsFrom = ee.List(_params.imgProps)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var propsTo = ee.List(_params.imgPropsRename)
      .cat(ee.List([_params.datetimeName, 'timestamp']));
    var imgProps = img.toDictionary(propsFrom).rename(propsFrom, propsTo);
    var fcSub = fc.filterBounds(img.geometry());
    return img.reduceRegions({
      collection: fcSub,
      reducer: _params.reducer,
      scale: _params.scale,
      crs: _params.crs
    })
    .map(function(f) {
      return f.set(imgProps);
    });
  }).flatten().filter(ee.Filter.notNull(_params.bandsRename));
  return results;
}

//Create buffers for moisture stations
var sitebuffer = site.map(bufferPoints(90, false));

//Set parameters for data extration and export
var paramscov = {
  scale: 30,
  crs: 'EPSG:4326',
  reducer: ee.Reducer.median(),
  bands: ['nlcd2001', 'nlcd2006', 'nlcd2011', 'nlcd2016', 'nlcd2019']
};
var sitecov = zonalStats(covCol, sitebuffer, paramscov);
//print(sitecov)

//Export NLCD results for retained soil moisture stations
Export.table.toDrive({
  collection: sitecov,
  selectors: ['Site', 'Network', 'State', 'nlcd2001', 'nlcd2006', 'nlcd2011', 'nlcd2016', 'nlcd2019'],
  fileFormat: 'CSV',
  });